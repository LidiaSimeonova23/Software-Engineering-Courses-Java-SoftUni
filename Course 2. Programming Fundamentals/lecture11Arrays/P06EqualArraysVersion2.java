package lecture11Arrays;

import java.util.Arrays;
import java.util.Scanner;

public class P06EqualArraysVersion2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //от конзолата трябва да прочетем два масива - може да се наложи да извършваме аритметични операции с елементите -> ще четем масиви от цели числа:
        int[] firstArray = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();      //от първия ред на конзолата четем първия целочислен масив - с функционално програмиране
        int[] secondArray = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();     //от втория ред на конзолата четем втория целочислен масив - с функционално програмиране

        //по принцип има две условия, за да се твърди, че два масива са еднакви: 1. дължините им трябва да са равни и 2. елементите на съответните индекси трябва да са еднакви/равни

        //в тази задача няма нужда да се проверява дали дължините на двата масива са еднакви - спрямо входните данни от всички тестове се вижда, че дължините на двата масива са еднакви
        //следователно, трябва да проверяваме само дали елементите на съответните индекси съвпадат
        //винаги при сравнения най-лесно се решава задачата, ако се открие поне една разлика (извод - различни са), или ако след всички проверки не е открита нито една разлика (извод - еднакви са)

        //с for цикъл ще итерираме по всеки един елемент от първия масив; ще сравним текущия елемент от първия масив със съответния текущ елемент от втория масив;
        //ако някъде открием разлика - веднага правим извод, че масивите са различни и прекъсваме програмата; ако след всички извършени итерации не е открита нито една двойка различни елементи, масивите са еднакви
        //тъй като достъпваме текущия елемент от масива чрез неговия уникален индекс, в тази задача не можем да обхождаме елементите на масива с foreach цикъл, защото с него не можем да достъпваме текущия елмент (при foreach няма индекси)
        int sumOfElementsInArray = 0;    //създаваме допълнителна променлива за сумата от елементите на първия масив (с начално стойност 0)
        for (int index = 0; index <= firstArray.length - 1; index++) {         //for (int index = 0; index < firstArray.length; index++)
            if (firstArray[index] != secondArray[index]) {      //ако текущият елемент от първия масив е различен от текущия елемент от втория масив
                System.out.printf("Arrays are not identical. Found difference at %d index.", index);     //принтираме, че масивите не са еднакви и съотв. в кой индекс е разликата
                return;    //прекъсваме цялата програма (и повече няма да се изпълни нито един ред код - нито вътре в цикъла, нито извън него)
            } else {       //else if (firstArray[index] == secondArray[index])      //в противен случай (тоест, ако текущият елемент от първия масив е равен на текущия елемент от втория масив)
                sumOfElementsInArray += firstArray[index];    //щом не е открито различие, съответните елементи са еднакви и прибавяме текущия елемент от първия масив към домоментната сума от елементите на първия масив
                //сумирането можеше да стане и с елементите на втория масив, тъй като двата масива са еднакви
            }
        }

        //ако след всички итерации на for цикъла никъде не е открита разлика (и не сме прекъснали програмата), стигаме до извода, че двата масива са еднакви, и принтираме намерената сума от елементите на първия (или втория) масив
        System.out.printf("Arrays are identical. Sum: %d", sumOfElementsInArray);
    }
}

package lecture14ExerciseNestedLoops;

import java.util.Scanner;

public class P02EqualSumsEvenOddPositionVersion1 {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        //веднъж четем от конзолата две шестцифрени цели числа в диапазона от 100000 до 300000; винаги първото въведено число ще бъде по-малко от второто
        int startNumber = Integer.parseInt(scanner.nextLine());
        int endNumber = Integer.parseInt(scanner.nextLine());

        //На конзолата да се отпечатат на 1 ред разделени с интервал всички числа, които се намират между двете, прочетени от конзолата числа, и отговарят на следното условие:
        //сумата от цифрите на четни и нечетни позиции да са равни. Ако няма числа, отговарящи на условието на конзолата не се извежда резултат.
        //Тоест, няма да принтираме всички числа от startNumber до endNumber, а само тези, които отговарят на условието

        //във външния цикъл взимаме текущото число, а във вътрешния цикъл проверяваме всяка една от шестте цифри на текущото число и намираме сумата от цифрите на четните позиции и сумата от цифрите на нечетните позиции
        //for (int currentNumber = startNumber; currentNumber <= endNumber; currentNumber++)
        for (int i = startNumber; i <= endNumber; i++) {            //принтирането ще се повтаря, знаем колко са итерациите - от startNumber до endNumber - > for-loop
            int currentNumber = i;            //създаваме си променлива за текущото число (то всъщност е числото i)

            int evenSum = 0;     //създаваме си променлива за четната сума с начална стойност 0
            int oddSum = 0;      //създаваме си променлива за нечетната сума с начална стойност 0
            for (int position = 6; position >= 1; position--) {             //числото е шестцифрено - ще проверим всяка от цифрите в обратен ред (това действие ще се повтори 6 пъти - for-loop) - чрез декрементация - намаляване стойността на променливата с единица
                int lastDigit = currentNumber % 10;           //с модулно деление на 10 взимаме (намираме) последната цифра от дадено число (намираме остатъка)

                if (position % 2 == 0) {        //ако позицията е четна (а тя е четна, ако модулно се дели на 2 с остатък 0)
                    evenSum += lastDigit;            //evenSum = evenSum + lastDigit;    -> четната сума е равна на четната сума до момента + текущата цифра
                } else {                 //ако позицията е нечетна
                    oddSum += lastDigit;             //oddSum = oddSum + lastDigit;      -> нечетната сума е равна на нечетната сума до момента + текущата цифра
                }
                currentNumber = currentNumber / 10;      //с целочислено деление на 10 премахваме последната цифра от дадено число (тоест, остават предишните цифри - без последната)
                                                         //например, ако числото е било шестцифрено, вече става петцифрено
            }

            if (evenSum == oddSum) {            //за текущото число проверяваме - ако сумата от цифрите на четните позиции е равна на сумата от цифрите на нечетните позиции
                System.out.print(i + " ");             //да се принтират числата, които отговарят на това условие, на един ред с празно разстояние между тях
                //System.out.printf("%d ", i);
            }

        }


    }
}

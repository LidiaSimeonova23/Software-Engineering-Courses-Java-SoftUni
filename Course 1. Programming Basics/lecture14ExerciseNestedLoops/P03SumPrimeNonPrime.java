package lecture14ExerciseNestedLoops;

import java.util.Scanner;

public class P03SumPrimeNonPrime {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //Да се намери сумата на всички въведени прости и сумата на всички въведени непрости числа.
        //простите числа се делят само на 1 и на себе си
        // 0 и 1 не са прости числа
        //сложните (непростите) числа се делят освен на 1 и на себе си и на други числа

        //във външния цикъл взимаме текущото число, във вътрешния цикъл взимаме текущ делител (даденото число го проверяваме с всичките възможни делители до самото число, после преминаваме на следващото текущо число)
        int sumPrimeNumbers = 0;          //създаваме си променлива за сумата на простите числа с начална стойност 0 (после ще я променяме)
        int sumNonPrimeNumbers = 0;       //създаваме си променлива за сумата на непростите числа с начална стойност 0 (после ще я променяме)
        String input = scanner.nextLine();              //в началото определяме входните данни като текст
        while (!input.equals("stop")) {                   //ще четем входни данни до получаване на команда "stop"
            int number = Integer.parseInt(input);       //осигуряваме си, че ако входните данни не са команда "stop", то те са цели числа

            if (number < 0) {       //ако числото е отрицателно, принтираме, че е отрицателно; прекъсваме текущата итерация на цикъла (но преди това четем следващия ред входни данни - ако не го направим, ще имаме безкраен цикъл) и преминаваме към следващата итерация
                System.out.println("Number is negative.");
                input = scanner.nextLine();
                continue;              //прекъсваме текущата итерация на цикъла и преминаваме към следваща итерация
            }

            //делимо / делител = частно
            int divisorsCount = 0;          //създаваме си брояч за броя на делителите на текущото число  (тоест, за всяко текущо число искаме да проверим на колко на брой числа се дели)
            for (int currentDivisor = 1; currentDivisor <= number; currentDivisor++) {             //чрез for-цикъл и if-проверка в цикъла ще проверим колко са делителите на прочетеното от конзолата число (проверяваме всички делители currentDivisor - от 1 до съответното прочетено число)
                    //на 0 не се дели, затова директно почваме от 1
                if (number % currentDivisor == 0) {        //ако прочетеното число модулно се дели на делителя currentDivisor без остатък (с остатък 0), го прибавяме към брояча на делителите
                    divisorsCount++;       //divisorsCount = divisorsCount + 1;     //ако условието е вярно, броят на делителите нараства с единица
                }
            }

            if (divisorsCount == 2) {          //ако числото е просто /а то е просто, когато има точно два делителя (те са 1 и самото число), броячът на делителите е ревен на 2/, намираме сумата на простите числа
                sumPrimeNumbers = sumPrimeNumbers + number;          //sumPrimeNumbers += number;
            } else {                 //в противен случай, тоест, ако числото е непросто (а то е непросто, защото броят на делителите е повече от 2), намираме сумата на непростите числа
                sumNonPrimeNumbers = sumNonPrimeNumbers + number;    //sumNonPrimeNumbers += number;
            }

            input = scanner.nextLine();   //update - подканяме скенера да прочете следващия ред с входни данни (ако не го направим, ще имаме безкраен цикъл)
        }


        //извън циклите искаме да принтираме сумата от простите числа и сумата от непростите числа (принтирането им ще е само веднъж, а не многократно, затова е извън циклите)
        System.out.printf("Sum of all prime numbers is: %d%n", sumPrimeNumbers);          //System.out.println("Sum of all prime numbers is: " + sumPrimeNumbers);  - конкатенация (долепяне)
        System.out.printf("Sum of all non prime numbers is: %d", sumNonPrimeNumbers);     //System.out.println("Sum of all non prime numbers is: " + sumNonPrimeNumbers);  - конкатенация (долепяне)
    }
}

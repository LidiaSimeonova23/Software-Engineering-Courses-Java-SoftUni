package lecture24AssociativeArrays;

import java.util.Arrays;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class P01CountRealNumbersVersion1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //1. от първия ред на конзолата си прочитаме масив от дробни числа (по условие е казано, че числата са дробни)(избрахме да е масив (а не лист), защото няма да модифицираме елементите, а просто ще ги съхраняваме; масивите са най-бързо действащата структура)
        double[] realNumbersArray = Arrays.stream(scanner.nextLine().split(" ")).mapToDouble(Double::parseDouble).toArray();

        //2. искаме да видим кое число от масива колко пъти се съдържа - това е точно като ключ - стойност - значи като структура от данни можем да ползваме асоциативен масив:
        //за да можем на следващата стъпка (3.) да прибавяме записи към асоц. масив, първо трябва да си създадем такъв асоциативен масив:
        //създаваме си асоциативен масив (от 0 item-a в началото) от вид TreeMap, защото в условието е казано още при прибавянето си към асоц. масив записите да се подреждат във възходящ ред (сортиране) - ключът (числото) ще е от клас Double, стойността (колко пъти се срреща числото в прочетения от конзолата масив) ще е от клас Integer)
        TreeMap<Double, Integer> realNumbersMap = new TreeMap<>();
        //Map<Double, Integer> realNumbersMap = new TreeMap<>();

        // [8.0, 2.0, 2.0, 8.0, 2.0]  - масива realNumbersArray от дробни числа
        //2.0 -> 3
        //8.0 -> 2

        //3. трябва да обходим (чрез for цикъл или foreach цикъл) всеки елемент от прочетения масив realNumbersArray и да го добавим като ключ на запис към асоциативния масив realNumbersMap, ако все още няма такъв ключ в него
        //а ако вече има запис с такъв ключ в асоц. масив, не добавяме ключа, защото в асоц. масив не може да има два записа с един и същи ключ, просто презаписваме стойността (която е срещу ключа) на записа, тоест, променяме само стойността му (увеличаваме брой срещания на този ключ с единица)
        for (double number : realNumbersArray) {      //за всеки елемент от масив realNumbersArray
            if (!realNumbersMap.containsKey(number)) {      //ако асоц. масив realNumbersMap не съдържа ключа (прочетеното число, тоест текущия елемент от масива) ->
                realNumbersMap.put(number, 1);               //към асоц. масив прибавяме нов запис (прочетеното (текущото) число да е ключ на записа, стойността на записа да е 1, тъй като това число се среща за първи път в прочетения от конзолата масив)
            } else {           //в противен случай (тоест, ако асоц. масив realNumbersMap вече съдържа запис с такъв ключ (прочетеното число, тоест текущия елемент от масива) ->
                int value = realNumbersMap.get(number);        //създаваме си променлива за стойността на записа (item-а) и като стойност й присвояваме стойността до момента (старата стойност) + 1    //живот на променлива - създаваме я, когато ни потрябва, там, където ни трябва (в случая ни трябва само в рамките на тази проверка)
                realNumbersMap.put(number, value + 1);           //опитваме се да добавим ключ, който вече се съдържа в асоц. масив -> тъй като асоциативният масив вече съдържа запис с такъв ключ, не можем да добавим ключа отново, защото не може да има два записа с еднакъв ключ, но презаписваме стойността (срещу ключа) на записа, която се увеличава с единица (ако числото 8 се е срещало веднъж в масива, по този начин казваме, че вече се среща два пъти) - вместо 8 -> 1 ще имаме 8 -> 2
                //предишните 2 реда може да са обединят в 1 ред така:   realNumbersMap.put(number, realNumbersMap.get(number) + 1);
            }
        }

        //4. принтираме всеки запис (item) от асоциативния масив - първият начит е с foreach цикъл :
        for (Map.Entry<Double, Integer> entry : realNumbersMap.entrySet()) {
            System.out.printf("%.0f -> %d%n", entry.getKey(), entry.getValue());    //принтирането е на отделни редове   - принтираме ключа и срещу него стойността (в случая ключът е даден елемент от масива realNumbersArray, а стойността е колко пъти се съдържа този елемент в масива realNumbersArray)
        }

        //втори начин за принтирането на записите в асоц. масив:
        //realNumbersMap.entrySet().forEach(entry -> System.out.printf("%.0f -> %d%n", entry.getKey(), entry.getValue()));
    }
}

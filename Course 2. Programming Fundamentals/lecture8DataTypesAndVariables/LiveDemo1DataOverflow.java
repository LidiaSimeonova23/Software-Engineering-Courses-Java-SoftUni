package lecture8DataTypesAndVariables;

public class LiveDemo1DataOverflow {
    public static void main(String[] args) {

        //ДЕМОНСТРАЦИЯ КАКВО СЕ СЛУЧВА, КОГАТО НЕ СИ ОПРЕДЕЛИМ ПРАВИЛНО ТИПА ДАННИ (ТОЕСТ, КОГАТО ЗАДАДЕМ ГРЕШЕН ТИП НА НЯКОЯ ПРОМЕНЛИВА):
        //ТОВА СЕ НАРИЧА Data Overflow - "ПРЕВЪРТАНЕ" НА СТОЙНОСТИ - ВОДИ ДО ГРЕШКИ В ПРОГРАМАТА (КОДА)

        byte counter = 0;    //създавайки си променливата от тип byte, ние казваме, че стойностите й могат да са от -128 до 127
        for (int i = 1; i <= 130; i++) {           //for (int i = 0; i < 130; i++)  //искаме цикълът да се завърти 130 пъти - от 1 до 130 вкл. (или от 0 до 129 включително)
            counter++;      //на всяка итерация на цикъла броячът се инкрементира (увеличава стойността си с единица)  -> тоест, counter би следвало да получава стойности от 1 до 130  - но е от тип byte и най-голямата му стойност е 127 - след като се принтира 127, ще се почне от -128 наобратно
            System.out.println(counter);
            //след като изпълним (run-нем) кода, виждаме в конзолата, че вместо да се принтират числата от 1 до 130 включително, всъщност се принтират числата от 1 до 127 и след това се принтират -128, -127, -126
            //получава се така, защото обхватът на данни от тип byte е от -128 до 127 включително -> точно затова, като достигнем максималната стойност за данни от тип byte (127), ако трябва да има следващи принтирания, те започват от минималната стойност, която е -128 и вървят наобратно (-128, -127, -126, -125, -124 и т. нат.)
            //тоест, получава се превъртане на стойности (защото не сме си определили правилно типа данни, които ни трябват) и програмата (кодът) ни няма да е вярна
        }

    }
}

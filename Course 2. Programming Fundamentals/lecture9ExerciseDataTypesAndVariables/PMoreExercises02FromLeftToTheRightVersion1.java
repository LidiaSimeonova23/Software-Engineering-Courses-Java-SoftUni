package lecture9ExerciseDataTypesAndVariables;

import java.util.Arrays;
import java.util.Scanner;

public class PMoreExercises02FromLeftToTheRightVersion1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //ЗА РЕШЕНИЕТО НА ТАЗИ ЗАДАЧА ПОЛЗВАМЕ МАСИВИ - В ЛЕКЦИЯ 11 СЕ УЧАТ

        int numberOfLines = Integer.parseInt(scanner.nextLine());     //от първия ред на конзолата четем едно цяло число, което е броят редове, които ще трябва да прочетем

        //ще имаме повторения -> знаем колко пъти ще са те (толкова пъти, колкото е числото, прочетено от първия ред на конзолата) -> ще ползваме for цикъл:
        for (int currentLine = 1; currentLine <= numberOfLines; currentLine++) {     //за име на променлива ползваме currentLine вместо i
            String currentInput = scanner.nextLine();     //на всяка итерация на цикъла ще четем текущия ред с входни данни (първоначално ще ги четем като текст)
            String[] numbersAsTextsArray = currentInput.split(" ");      //разделяме прочетения текст на два отделни текста и получаваме масив от текстове (числа кота текстове)

            String leftElement = numbersAsTextsArray[0];     //създаваме си променлива за първия елемент от масива (отляво на текущия ред)
            String rightElement = numbersAsTextsArray[1];      //създаваме си променлива за втория елемент от масива (отдясно на текущия ред)

            //ОСОБЕНОТО В ТАЗИ ЗАДАЧА Е, ЧЕ ПЪРВО ТРЯБВА ДА НАМЕРИМ СУМАТА ОТ ВСИЧКИ ЦИФРИ И НА ЛЕВИЯ ЕЛЕМЕНТ, И НА ДЕСНИЯ ЕЛЕМЕНТ И ЧАК СЛЕД ТОВА ДА СРАВНИМ ЛЕВИЯ И ДЕСНИЯ ЕЛЕМЕНТ  (А ПО-ЛОГИЧНОТО БИ БИЛО ПЪРВО ДА СРАВНИМ ДВАТА ЕЛЕМЕНТА, ДА ВИДИМ КОЙ ОТ ТЯХ Е ПО-ГОЛЯМ И ДА НАМЕРИМ СУМАТА ОТ ЦИФРИТЕ САМО НА ПО-ГОЛЕМИЯ ОТ ДВАТА ЕЛЕМЕНТА)

            //тъй като лявото число е под формата на текст, с for цикъл ще итерираме по всички символи от текста, за да намерим кой е символът
            long sumLeft = 0;      //създаваме си променлива за сумата от всички цифри на лявото число (с начална стойност 0)
            for (int index = 0; index < leftElement.length(); index++) {         //for (int index = 0; index <= leftElement.length() - 1; index++)
                char currentSymbol = leftElement.charAt(index);      //създаваме си променлива за текущия символ

                //за да можем да извършим събирането, текущият символ ни трябва като число - първо превръщаме текущия символ в текст, а после превръщаме текста в число:
                //обаче сред входните данни има и отрицателни числа (те са със знак минус)  - на нас минусът не ни трябва, трябват ни само цифрите на числото
                if (currentSymbol != '-') {     //по този начин изключваме символа '-'    //ако текущият символ е различен от минус
                    String currentSymbolAsText = currentSymbol + "";     //чрез конкатенация с празен String превръщаме текущия символ в текст
                    long currentSymbolAsDigit = Long.parseLong(currentSymbolAsText);     //превръщаме текста в число (чрез parse-ване)
                    sumLeft += currentSymbolAsDigit;       //sumLeft = sumLeft + currentSymbolAsDigit;         //символът освен символна стойност има и целочислена стойност и в случая компилаторът взима целочислената стойност, за да извърши операция събиране      //sumLeft += Character.getNumericValue(currentSymbol);
                    //и след всички итерации сме намерили сумата от всички цифри на лявото число
                }
            }

            //тъй като дясното число е под формата на текст, с for цикъл ще итерираме по всички символи от текста, за да намерим кой е символът
            long sumRight = 0;      //създаваме си променлива за сумата от всички цифри на дясното число (с начална стойност 0)
            for (int index = 0; index < rightElement.length(); index++) {        //for (int index = 0; index <= leftElement.length() - 1; index++)
                char currentSymbol = rightElement.charAt(index);       //създаваме си променлива за текущия символ

                //за да можем да извършим събирането, текущият символ ни трябва като число - първо превръщаме текущия символ в текст, а после превръщаме текста в число:
                //обаче сред входните данни има и отрицателни числа (те са със знак минус)  - на нас минусът не ни трябва, трябват ни само цифрите на числото
                if (currentSymbol != '-') {     //по този начин изключваме символа '-'    //ако текущият символ е различен от минус
                    String currentSymbolAsText = currentSymbol + "";     //чрез конкатенация с празен String превръщаме текущия символ в текст
                    long currentSymbolAsDigit = Long.parseLong(currentSymbolAsText);     //превръщаме текста в число (чрез parse-ване)
                    sumRight += currentSymbolAsDigit;       //sumRight = sumRight + currentSymbolAsDigit;       //символът освен символна стойност има и целочислена стойност и в случая компилаторът взима целочислената стойност, за да извърши операция събиране      //sumRight += Character.getNumericValue(currentSymbol);
                    //и след всички итерации сме намерили сумата от всички цифри на дясното число
                }
            }


            //ще трябва да сравним числовите стойности на двата елемента, а ние до момента ги имаме като текстове -> следователно, трябва да ги превърнем в числа:
            long leftNumber = Long.parseLong(leftElement);     //превръщаме левия елемент от текст в число (чрез parse-ване)
            long rightNumber = Long.parseLong(rightElement);     //превръщаме десния елемент от текст в число (чрез parse-ване)

            //сравняваме лявото и дясното число (на текущия ред с входни данни) и принтираме сумата от цифрите на по-голямото от тях
            if (leftNumber > rightNumber) {        //ако лявото число е по-голямо от дясното число
                System.out.println(sumLeft);       //принтираме сумата от всички цифри на лявото число
            } else {      //if (leftNumber <= rightNumber)    //в противен случай (тоест, ако лявото число не е по-голямо от дясното) принтираме сумата от всички цифри на дясното число
                System.out.println(sumRight);
            }

        }


    }
}

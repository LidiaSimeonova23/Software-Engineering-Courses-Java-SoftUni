package lecture9ExerciseDataTypesAndVariables;

import java.util.Scanner;

public class PMoreExercises04RefactoringPrimeCheckerVersion1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());     //от първия ред на конзолата четем едно цяло число

        //едно число е просто, ако се дели само на 1 и на себе си  (тоест, броят на делителите му е точно 2)  /0 и 1 не са прости числа/
        //по условие трябва да проверяваме дали са прости или не числата, които са в диапазона от 2 вкл. до number вкл.   ->  ще имаме два вложени цикъла:
        //във външния цикъл взимаме текущото число (в диапазона от 2 до number, прочетено от конзолата);
        //а във вътрешния цикъл ще проверяваме това текущо число дали се дели на поне едно число в диапазона от 2 до числото, което предхожда текущото число
        for (int currentNumber = 2; currentNumber <= number; currentNumber++) {        //за да ми е по-удобно, си кръстих променливата currentNumber вместо i

            int numberOfDivisors = 2;      //създаваме си променлива, която да ни държи броя на делителите на всяко просто число - те са точно два (1 и самото число), затова задаваме като начална стойност 2

            //тъй като е ясно, че всяко число се дели на едно и на себе си (тоест, всяко число има задължително поне 2 делителя), с едно и със самото число изобщо няма да проверяваме дали са делители (ясно е, че са такива)->
            //затова директно ще почнем да проверяваме дали текущото  число се дели на 2, после на 3, после на 4 и т. нат., докато стигнем до числото, което предхожда текущото число
            for (int currentDivisor = 2; currentDivisor < currentNumber; currentDivisor++) {     //за да ми е по-удобно, си кръстих променливата currentDivisor вместо j
                if (currentNumber % currentDivisor == 0) {        //ако текущото число модулно се дели на текущия делител без остатък (с остатък 0), значи делението е точно   - следователно, вече сме открили поне един делител повече (тоест, делителите на текущото число вече стават 3), от което правим извод, че текущото число не е просто
                    numberOfDivisors++;     //numberOfDivisors += 1;    //numberOfDivisors = numberOfDivisors + 1;     //броят на делителите на текущото число се увеличава с единица (делителите стават 3)
                    System.out.println(currentNumber + " -> false");      //принтираме, че текущото число не е просто
                    break;     //прекъсваме вътрешния цикъл  (и следва да се изпълни проверката, която е под него)
                }
            }


            //проверка - ако броят на делителите на текущото число е точно два (не сме открили други делители), то принтираме, че текущото число е просто
            if (numberOfDivisors == 2) {
                System.out.println(currentNumber + " -> true");
            }

        }


    }
}
